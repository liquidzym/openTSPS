/*
  you can put a one sentence description of your library here.
  
  (c) copyright
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General
  Public License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA  02111-1307  USA
 */

package lab;


import processing.core.PApplet;
import java.util.ArrayList;
import oscP5.*;
import netP5.*;
import processing.xml.*;
import java.io.PrintWriter;
import java.io.IOException;

/**
 * this is a template class and can be used to start a new processing library.
 * make sure you rename this class as well as the name of the package template
 * this class belongs to.
 * 
 * @example LABNet 
 * @author Brett Renfer
 * 
 */
public class LABNet
{
	
	OscP5 sendHost;
	
	/***********************************************************
		BUILD VARS
	***********************************************************/
	
		String 		LAB_XML_FILE = "config.xml";
		int 		LAB_DEFAULT_PORT = 2000;
	
		ArrayList<LABOSCListener> OSClisteners;
		ArrayList<LABOSCSender> OSCSenders;
	
		LABOSCListener switchListener;
		boolean initialized;
		
		//xml things
		XMLElement 	XML;
		PApplet parent;
		
	/***********************************************************
		CONSTRUCTOR
	***********************************************************/
	
		public LABNet(PApplet _parent){
			parent = _parent;
			/*
			//intialize arraylists
			OSClisteners = new ArrayList();
			OSCSenders = new ArrayList();
			
			//load the last osc variables from XML
			loadXMLVariables();

			switchListener = new LABOSCListener(LAB_DEFAULT_PORT, "LAB_switch_listener");
			initialized = true;
			addOSCListener(switchListener);		
			*/	
		};
		
		public LABNet(PApplet _parent, int _port){
			parent = _parent;
			loadXMLVariables();
			
			sendHost = new OscP5(parent, LAB_DEFAULT_PORT);
			
			//intialize arraylists
			OSClisteners = new ArrayList();
			OSCSenders = new ArrayList();
			
			LAB_DEFAULT_PORT	= _port;
			initialized = true;
			
			//create the lab switch osc listener
			switchListener = new LABOSCListener(parent, _port, "LAB_switch_listener", OSClisteners.size());
			addOSCListener(switchListener);
		};
		
	/***********************************************************
		UPDATE
	***********************************************************/
		
		public void update(){
			/*
			NO NEED TO MANUALLY UPDATE IN PROCESSING!
			for (int i=0; i<OSClisteners.size(); i++){
				LABOSCListener listener = (LABOSCListener) OSClisteners.get(i);				
				listener.update();
			}
			*/
			//update all OSC senders
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);
				
				String sHost = "/" + sender.name + "/reroute/host";
	 			String sPort = "/" + sender.name + "/reroute/port";
				String dupHost = "/" + sender.name + "/duplicate/host";
	 			String dupPort = "/" + sender.name + "/duplicate/port";
	 			String destroy = "/" + sender.name + "/destroy";
	
				sender.host = getStringValue(sHost);
				sender.port = getIntValue(sPort);	
				sender.dupHost = getStringValue(dupHost);
				sender.dupPort = getIntValue(dupPort);
				sender.destroy = getBooleanValue(destroy);
				sender.update();

				if (sender.dupPort != 0 && sender.dupHost != ""){
					duplicateOscSender(sender, sender.dupHost, sender.dupPort);
					sender.dupPort = 0;
					sender.dupHost = "";
				}
				if (sender.destroy && sender.active){
					destroy(sender);
				}
			}
			
			//update all OSC listeners (just checking for vars)
			for (int i=0; i<OSClisteners.size(); i++){
				LABOSCListener listener = (LABOSCListener) OSClisteners.get(i);
				
				if (listener != switchListener){
	 				String sPort = "/" + listener.name + "/reroute/port";
		 			String dupPort = "/" + listener.name + "/duplicate/port";
		 			String destroy = "/" + listener.name + "/destroy";
	
					listener.port = getIntValue(sPort);	
					listener.update();
				}				
			}
		};
	
	/***********************************************************
		SEND - SEND ALL OR ONE
	***********************************************************/
	
		public void send(){
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);
				sender.send();
			}
		}
		
		public void send(String name){
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);
				if (sender.name.equals(name)) sender.send();
			}
		}
	
	/***********************************************************
		GET VARIABLE VALUE: CRUCIAL!!
		
		- you will need to dynamically cast to whatever
		type you're retrieving 
		
	***********************************************************/
		
		//this doesn't work. ;(
		public Object getValue(String _name){
			for (int i=0; i<OSClisteners.size(); i++){
				LABOSCListener listener = (LABOSCListener) OSClisteners.get(i);
				for (int j=0; j<listener.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) listener.variablePointers.get(j);
					if (variable.name.equals(_name)){
						return (Object) variable.getValue();
					}
				}
			}
			return new Object();
		}
		
		public String getStringValue(String _name){
			for (int i=0; i<OSClisteners.size(); i++){
				LABOSCListener listener = (LABOSCListener) OSClisteners.get(i);
				for (int j=0; j<listener.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) listener.variablePointers.get(j); 
					if (variable.name.equals(_name)){
						return variable.getStringValue();
					}
				}
			}
			parent.println("VARIABLE "+_name+" NOT FOUND");
			return new String();
		}
		
		public int getIntValue(String _name){
			for (int i=0; i<OSClisteners.size(); i++){
				LABOSCListener listener = (LABOSCListener) OSClisteners.get(i);
				for (int j=0; j<listener.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) listener.variablePointers.get(j);
					if (variable.name.equals(_name)){
						return variable.getIntValue();
					}
				}
			}
			parent.println("VARIABLE "+_name+" NOT FOUND");
			return 0;
		}
		
		public float getFloatValue(String _name){
			for (int i=0; i<OSClisteners.size(); i++){
				LABOSCListener listener = (LABOSCListener) OSClisteners.get(i);
				for (int j=0; j<listener.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) listener.variablePointers.get(j);
					if (variable.name.equals(_name)){
						return variable.getFloatValue();
					}
				}
			}
			parent.println("VARIABLE "+_name+" NOT FOUND");
			return 0.0f;
		}
		
		public boolean getBooleanValue(String _name){
			for (int i=0; i<OSClisteners.size(); i++){
				LABOSCListener listener = (LABOSCListener) OSClisteners.get(i);
				for (int j=0; j<listener.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) listener.variablePointers.get(j);
					if (variable.name.equals(_name)){
						return variable.getBooleanValue();
					}
				}
			}
			parent.println("VARIABLE "+_name+" NOT FOUND");
			return false;
		}
	
	/***********************************************************
		SET VARIABLE VALUE(s)
	***********************************************************/	
	
		public void setValue(String _name, String value){
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);	
				for (int j=0; j<sender.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) sender.variablePointers.get(j);
					if (variable.name.equals(_name)){
						variable.setValue(value);
					}
				}
			}		
		}
		
		public void setValue(String _name, boolean value){
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);	
				for (int j=0; j<sender.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) sender.variablePointers.get(j);
					if (variable.name.equals(_name)){
						variable.setValue(value);
					}
				}
			}		
		}
		
		public void setValue(String _name, int value){
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);	
				for (int j=0; j<sender.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) sender.variablePointers.get(j);
					if (variable.name.equals(_name)){
						variable.setValue(value);
					}
				}
			}		
		}
		
		public void setValue(String _name, float value){
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);	
				for (int j=0; j<sender.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) sender.variablePointers.get(j);
					if (variable.name.equals(_name)){
						variable.setValue(value);
					}
				}
			}		
		}
		
		public void setValue(String _name, double value){
			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender sender = (LABOSCSender) OSCSenders.get(i);	
				for (int j=0; j<sender.variablePointers.size(); j++){
					LABOSCVariable variable = (LABOSCVariable) sender.variablePointers.get(j);
					if (variable.name.equals(_name)){
						variable.setValue(value);
					}
				}
			}		
		}

	/***********************************************************
		LOAD + SAVE XML
	***********************************************************/
	
		public void loadXMLVariables(){
			try{
				XML = new XMLElement(parent, LAB_XML_FILE);
			}
			catch (NullPointerException e){
				XML = null;				
			}
			if (XML != null){
				if (XML.hasChildren()){
					XMLElement tLabOSCPort	= XML.getChild("labOSCPort");
					if (tLabOSCPort != null) LAB_DEFAULT_PORT = Integer.parseInt(tLabOSCPort.getContent());
				}
			}
			saveXMLVariables();
		};

		public void saveXMLVariables(){
			
			try{
				XML = new XMLElement(parent, LAB_XML_FILE);
			}
			catch (NullPointerException e){
				XML = null;
			}
			if (XML != null){
				
				XMLElement tLabOSCPort	= XML.getChild("labOSCPort");
				parent.println(tLabOSCPort != null);
				if (tLabOSCPort != null){
					tLabOSCPort.setContent(Integer.toString((Integer)LAB_DEFAULT_PORT));
				} else {
					XML = new XMLElement();
					XML.setName("config");
				
					XMLElement labTag = new XMLElement();
					labTag.setName("labOSCPort");
					labTag.setContent(Integer.toString((Integer)LAB_DEFAULT_PORT));
				
					XML.addChild(labTag);
				
					PrintWriter xmlfile;
					xmlfile = parent.createWriter("config.xml");
					
					try {
						XMLWriter writer = new XMLWriter(xmlfile) ;

						writer.write(XML);

						xmlfile.flush();
						xmlfile.close();
					}
				
					catch (IOException e){
						e.printStackTrace();
					} 
				}
			} else {
				parent.println("HEY");
				XML = new XMLElement();

				XMLElement labTag = new XMLElement();
				labTag.setName("labOSCPort");
				labTag.setContent(Integer.toString((Integer)LAB_DEFAULT_PORT));

				XML.addChild(labTag);
				
				parent.println("XML: "+XML.toString(true));
				
				PrintWriter xmlfile;
				xmlfile = parent.createWriter("config.xml");

				try {
					XMLWriter writer = new XMLWriter(xmlfile) ;

					writer.write(XML);

					xmlfile.flush();
					xmlfile.close();
				}

				catch (IOException e){
					e.printStackTrace();
				}
			}
		};
		
		
	/***********************************************************
		ADD LISTENER 
	***********************************************************/
	
		public void addOSCListener(LABOSCListener listener){		
			//create message string to listen to
			String reroute = "/" + listener.name + "/reroute";
			String destroy = "/" + listener.name + "/destroy";
			
			//add to switch + add to listener vector
			if (listener != switchListener){
				switchListener.addVariable(reroute, listener.port, reroute);
				switchListener.addVariable(destroy, listener.port, destroy);
				parent.println("LISTENING FOR SWITCH ON "+reroute);
			} else {
				parent.println("ADDING MAIN LISTENER");
			}

			OSClisteners.add(listener);
		};

	/***********************************************************
		ADD SENDER 
	***********************************************************/

		public void addOscSender(LABOSCSender sender){
			//sendHost
			sender.initialize(sendHost);			
			
			//create message string to listen to
			String ssHost = "/" + sender.name + "/reroute/host";
 			String ssPort = "/" + sender.name + "/reroute/port";
			String duplicateHost = "/" + sender.name + "/duplicate/host";
 			String duplicatePort = "/" + sender.name + "/duplicate/port";
 			String destroy = "/" + sender.name + "/destroy";

			parent.println("LISTENING FOR SWITCH ON " + ssHost + ":" + ssPort);

			//add host, port + duplicate vars
			switchListener.addVariable(ssHost,  sender.host, ssHost);
			switchListener.addVariable(ssPort, sender.port, ssPort);
			switchListener.addVariable(duplicateHost, sender.dupHost, duplicateHost);
			switchListener.addVariable(duplicatePort, sender.dupPort, duplicatePort);
			switchListener.addVariable(destroy, sender.destroy, destroy);

			OSCSenders.add(sender);
		};

		public LABOSCSender addOscSender(String _host, int _port, String _name){
			LABOSCSender sender = new LABOSCSender(parent, sendHost, _host, _port, _name, OSCSenders.size());
			
			//create message string to listen to
			String ssHost = "/" + sender.name + "/reroute/host";
 			String ssPort = "/" + sender.name + "/reroute/port";
			String duplicateHost = "/" + sender.name + "/duplicate/host";
 			String duplicatePort = "/" + sender.name + "/duplicate/port";
 			String destroy = "/" + sender.name + "/destroy";
			
			parent.println("LISTENING FOR SWITCH ON " + ssHost + ":" + ssPort);
			
			//add host, port + duplicate vars
			switchListener.addVariable(ssHost,  sender.host, ssHost);
			switchListener.addVariable(ssPort, sender.port, ssPort);
			switchListener.addVariable(duplicateHost, sender.dupHost, duplicateHost);
			switchListener.addVariable(duplicatePort, sender.dupPort, duplicatePort);
			switchListener.addVariable(destroy, sender.destroy, destroy);
			
			OSCSenders.add(sender);
			return sender;
		};

	/***********************************************************
		DUPLICATE SENDER 
	***********************************************************/

		public void duplicateOscSender(LABOSCSender sender, String host, int port){
			boolean newsender = true;

			for (int i=0; i<OSCSenders.size(); i++){
				LABOSCSender dubSender = (LABOSCSender) OSCSenders.get(i);
				if (dubSender.host == host && dubSender.port == port) newsender = false;
			}

			if (newsender){			
				LABOSCSender newSender = new LABOSCSender( parent, sendHost, host, port, sender.name, OSCSenders.size());
				
				for (int i=0; i<sender.variablePointers.size(); i++){
					LABOSCVariable variable = (LABOSCVariable) sender.variablePointers.get(i);
					newSender.addVariable(variable);
				};
				addOscSender(newSender);
			}
		};
		
	/***********************************************************
		KILL SENDER 
	***********************************************************/
		
		public void destroy (LABOSCSender sender){
			if (OSCSenders.size() > 1){
				for (int i=0; i<OSCSenders.size(); i++){
					LABOSCSender curSender = (LABOSCSender) OSCSenders.get(i);
					if (curSender == (sender)){
						OSCSenders.remove(i);
						break;
					}
				}
			} else {
				sender.active = false;
			}
		};
		
		//be careful with this, as dupliated senders have the same name; the first one will be deleted.
		
		public void destroy (String sender){
			if (OSCSenders.size() > 1){
				for (int i=0; i<OSCSenders.size(); i++){
					LABOSCSender curSender = (LABOSCSender) OSCSenders.get(i);
					if (curSender.name.equals(sender)){
						OSCSenders.remove(i);
						break;
					}
				}
			} else {
				for (int i=0; i<OSCSenders.size(); i++){
					LABOSCSender curSender = (LABOSCSender) OSCSenders.get(i);
					if (curSender.name.equals(sender)){
						curSender.active = false;
						break;
					}
				}
			}
		};
		
}
