package lab;

import oscP5.*;
import netP5.*;

/***********************************************************************
	OSC Message is structured like this:
 
	 address: cya/person/ + ordered id (i.e. cya/person/0)
 
	 argument 1: pid; 
	 argument 2: age; 
	 argument 3: centroid.x; 
	 argument 4: centroid.y; 
	 argument 5: velocity.x; 
	 argument 6: velocity.y; 
	 argument 7: boundingRect.x; 
	 argument 8: boundingRect.y; 
	 argument 9: boundingRect.width; 
	 argument 10: boundingRect.height; 

***********************************************************************/

class CYA 
{
	PApplet parent;
	OscP5 receiver;
	ArrayList people;
	
	int port = 12000;
	
	CYA( PApplet _parent ){
		parent = _parent;
		receiver = new OscP5(this, port);
		people = new ArrayList();
	}
	
	CYA( PApplet _parent, int port )
	{
		parent = _parent;
		receiver = new OscP5(this, port);
		people = new ArrayList();
	}
	
	void update(){
		for (int i=people.size()-1; i>=0; i--)
		{
			CYAPerson checkPerson = (CYAPerson) people.get(i);
			if (checkPerson.dead == true){
				println("DEAD!");
				people.remove(i);
			}
		}
	}
	
	void oscEvent(OscMessage theOscMessage)
	{
		//adding or updating a person
		if (theOscMessage.checkAddrPattern("cya/personEntered/"))
		{				
			CYAPerson p = new CYAPerson();
			p.id = theOscMessage.get(0).intValue();
			p.age = theOscMessage.get(1).intValue();
			p.centroid.x = theOscMessage.get(2).floatValue();
			p.centroid.y = theOscMessage.get(3).floatValue();
			p.velocity.x = theOscMessage.get(4).floatValue();
			p.velocity.y = theOscMessage.get(5).floatValue();
			p.boundingRect.x = theOscMessage.get(6).floatValue();
			p.boundingRect.y = theOscMessage.get(7).floatValue();
			p.boundingRect.width = theOscMessage.get(8).floatValue();
			p.boundingRect.height = theOscMessage.get(9).floatValue();
			people.add(p);
		} else if (theOscMessage.checkAddrPattern("cya/personMoved/")){
			CYAPerson p = new CYAPerson();
			p.id = theOscMessage.get(0).intValue();
			p.age = theOscMessage.get(1).intValue();
			p.centroid.x = theOscMessage.get(2).floatValue();
			p.centroid.y = theOscMessage.get(3).floatValue();
			p.velocity.x = theOscMessage.get(4).floatValue();
			p.velocity.y = theOscMessage.get(5).floatValue();
			p.boundingRect.x = theOscMessage.get(6).floatValue();
			p.boundingRect.y = theOscMessage.get(7).floatValue();
			p.boundingRect.width = theOscMessage.get(8).floatValue();
			p.boundingRect.height = theOscMessage.get(9).floatValue();
			
			boolean found = false;
			
			for (int i=0; i<people.size(); i++)
			{
				CYAPerson checkPerson = (CYAPerson) people.get(i);
				if (checkPerson.id == p.id){
					people.set(i, p);
					found = true;
					break;
				}
			}
			
			if (!found) people.add(p);
		}	
		//killing an object
		else if (theOscMessage.checkAddrPattern("cya/personWillLeave"))
		{
			CYAPerson p = new CYAPerson();
			p.id = theOscMessage.get(0).intValue();
			
			for (int i=0; i<people.size(); i++)
			{
				CYAPerson checkPerson = (CYAPerson) people.get(i);
				if (checkPerson.id == p.id){
					checkPerson.dead = true;
				}
			}
		} else {
		}	
	};

}