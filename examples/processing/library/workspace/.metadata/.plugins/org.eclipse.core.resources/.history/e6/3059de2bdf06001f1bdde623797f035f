package cya;

import processing.core.PApplet;

import java.util.ArrayList;
import java.lang.reflect.Method;
import oscP5.*;
import netP5.*;

/***********************************************************************
OSC Message is structured like this:

 address: cya/person/ + ordered id (i.e. cya/person/0)

 argument 1: pid; 
 argument 2: age; 
 argument 3: centroid.x; 
 argument 4: centroid.y; 
 argument 5: velocity.x; 
 argument 6: velocity.y; 
 argument 7: boundingRect.x; 
 argument 8: boundingRect.y; 
 argument 9: boundingRect.width; 
 argument 10: boundingRect.height; 

***********************************************************************/

public class CYA implements PGraphics
{

	PApplet parent;
	OscP5 receiver;
	public ArrayList<CYAPerson> people;
	
	Method personEntered;
	Method personUpdated;
	Method personLeft;
	
		
	int port = 12000;
	
	public CYA( PApplet _parent ){
		parent = _parent;
		receiver = new OscP5(this, port);
		people = new ArrayList<CYAPerson>();
		
		// check to see if the host applet implements methods:
	    // public void personEntered(CYAPerson p)
	    // public void personEntered(CYAPerson p)
	    // public void personEntered(CYAPerson p)
	    try {
	    	personEntered = parent.getClass().getMethod("personEntered", new Class[] { CYAPerson.class });
	    	personUpdated = parent.getClass().getMethod("personUpdated", new Class[] { CYAPerson.class });
	    	personLeft = parent.getClass().getMethod("personLeft", new Class[] { CYAPerson.class });
	    } catch (Exception e) {
	      // no such method, or an error.. which is fine, just ignore
	    }
	}
		
	public CYA( PApplet _parent, int port )
	{
		parent = _parent;
		receiver = new OscP5(this, port);
		people = new ArrayList<CYAPerson>();
	}
		
	public void draw(){
		for (int i=people.size()-1; i>=0; i--)
		{
			CYAPerson checkPerson = (CYAPerson) people.get(i);
			if (checkPerson.dead == true){
				people.remove(i);
			}
		}
	}
		
	public void oscEvent(OscMessage theOscMessage)
	{
		//adding a person
		if (theOscMessage.checkAddrPattern("cya/personEntered/"))
		{				
			CYAPerson p = new CYAPerson();
			p.id = theOscMessage.get(0).intValue();
			p.age = theOscMessage.get(1).intValue();
			p.centroid.x = theOscMessage.get(2).floatValue();
			p.centroid.y = theOscMessage.get(3).floatValue();
			p.velocity.x = theOscMessage.get(4).floatValue();
			p.velocity.y = theOscMessage.get(5).floatValue();
			p.boundingRect.x = theOscMessage.get(6).floatValue();
			p.boundingRect.y = theOscMessage.get(7).floatValue();
			p.boundingRect.width = theOscMessage.get(8).floatValue();
			p.boundingRect.height = theOscMessage.get(9).floatValue();
			callPersonEntered(p);		
			
		//updating a person (or adding them if they don't exist in the system yet)
		} else if (theOscMessage.checkAddrPattern("cya/personMoved/")){
			CYAPerson p = new CYAPerson();
			p.id = theOscMessage.get(0).intValue();
			p.age = theOscMessage.get(1).intValue();
			p.centroid.x = theOscMessage.get(2).floatValue();
			p.centroid.y = theOscMessage.get(3).floatValue();
			p.velocity.x = theOscMessage.get(4).floatValue();
			p.velocity.y = theOscMessage.get(5).floatValue();
			p.boundingRect.x = theOscMessage.get(6).floatValue();
			p.boundingRect.y = theOscMessage.get(7).floatValue();
			p.boundingRect.width = theOscMessage.get(8).floatValue();
			p.boundingRect.height = theOscMessage.get(9).floatValue();
				
			boolean found = false;				
			for (int i=0; i<people.size(); i++)
			{
				CYAPerson checkPerson = (CYAPerson) people.get(i);
				if (checkPerson.id == p.id){
					checkPerson.update(p);
					callPersonUpdated(checkPerson);
					found = true;
					break;
				}
			}
				
			if (!found){
				callPersonEntered(p);
			}
		}	
		
		//killing an object
		else if (theOscMessage.checkAddrPattern("cya/personWillLeave/"))
		{
			CYAPerson p = new CYAPerson();
			p.id = theOscMessage.get(0).intValue();
			p.age = theOscMessage.get(1).intValue();
			p.centroid.x = theOscMessage.get(2).floatValue();
			p.centroid.y = theOscMessage.get(3).floatValue();
			p.velocity.x = theOscMessage.get(4).floatValue();
			p.velocity.y = theOscMessage.get(5).floatValue();
			p.boundingRect.x = theOscMessage.get(6).floatValue();
			p.boundingRect.y = theOscMessage.get(7).floatValue();
			p.boundingRect.width = theOscMessage.get(8).floatValue();
			p.boundingRect.height = theOscMessage.get(9).floatValue();
						
			for (int i=0; i<people.size(); i++)
			{
				CYAPerson checkPerson = (CYAPerson) people.get(i);
				if (checkPerson.id == p.id){
					checkPerson.update(p);
					checkPerson.dead = true;
					callPersonLeft( checkPerson );
					break;
				}
			}
		} else {
		}	
	}

	private void callPersonEntered( CYAPerson p )
	{
		people.add(p);	
		if (personEntered != null) {
			try {
				personEntered.invoke(parent, new Object[] { p });
			} catch (Exception e) {
				System.err.println("Disabling personEntered() for CYA because of an error.");
				e.printStackTrace();
				personEntered = null;
			}
		}
	}
	
	private void callPersonUpdated ( CYAPerson p )
	{
		if (personUpdated != null) {
			try {
				personUpdated.invoke(parent, new Object[] { p });
			} catch (Exception e) {
				System.err.println("Disabling personUpdated() for CYA because of an error.");
				e.printStackTrace();
				personUpdated = null;
			}
		}
	}
	
	private void callPersonLeft( CYAPerson p )
	{
		if (personLeft != null) {
			try {
				personLeft.invoke(parent, new Object[] { p });
			} catch (Exception e) {
				System.err.println("Disabling personLeft() for CYA because of an error.");
				e.printStackTrace();
				personLeft = null;
			}
		}
	}
	
};