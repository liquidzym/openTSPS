package com.lab {		import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.events.Event;	import flash.geom.Point;		import com.lab.PersonBase;	import com.lab.events.TSPSEvent;		/**	 * This Class maintains the state of a person object defined by openTSPS	 *	 * @author The Lab at Rockwell Group. Modified by Jeff Hoefs.	 */		public class TSPSPerson extends PersonBase implements IEventDispatcher {				// this is the number of seconds that a person can		// remain when no longer active		// basically this gets rid of any people who get stuck		private static const DEFAULT_MAX_AGE:uint = 1;	// in seconds		private static const DEBUG:Boolean = true;		private var _maxAge:uint = DEFAULT_MAX_AGE;		private var _dispatcher:EventDispatcher;				/**		 * The maximum time in seconds an inactive person can remain in the view		 * 		 * @return	the maximum age of a person		 */		public function get maxAge():uint {			return _maxAge;		}				/**		 * The maximum time in seconds an inactive person can remain in the view		 * 		 * @param	value the maximum age of a person		 */		public function set maxAge(value:uint):void {			if (value > 0) {				_maxAge = value;			} else {				throw new Error("maxAge must be greater than 0");			}		}				public function TSPSPerson() {			super();						_dispatcher = new EventDispatcher(this);		}				/**		 * internal method (may only be called within this package).		 * 		 * This method ensures that any person who should no		 * longer be in view is removed. Basically this ensures that		 * any stuck people are removed.		 */		internal function update():void {			this.realAge++;			if (Math.abs(this.realAge - this.age) > _maxAge){				this.dead = true;				debug("person removed from view");				dispatchEvent( new TSPSEvent( TSPSEvent.PERSON_LEFT, this ) );			} 		}				/**		 * internal method (may only be called within this package).		 * 		 * This method is used to update the data for this person object. 		 * It is called when new date is received		 */		internal function updateData ( person:TSPSPerson ):void {					this.age = this.realAge = person.age;						this.centroid 	= person.centroid;			this.velocity 	= person.velocity;			this.opticalFlow = person.opticalFlow;			this.x 			= person.x;			this.y			= person.y;			this.realWidth	= person.realWidth;			this.realHeight	= person.realHeight;			this.contours	= person.contours;				this.dead 		= false;			dispatchEvent ( new TSPSEvent(TSPSEvent.PERSON_UPDATED, this));		}			/* implement EventDispatcher		 */		public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void {			_dispatcher.addEventListener(type, listener, useCapture, priority);		}		public function dispatchEvent(evt:Event):Boolean {			return _dispatcher.dispatchEvent(evt);		}		public function hasEventListener(type:String):Boolean {			return _dispatcher.hasEventListener(type);		}		public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void {			_dispatcher.removeEventListener(type, listener, useCapture);		}		public function willTrigger(type:String):Boolean {			return _dispatcher.willTrigger(type);		}				private function debug(msg:String):void {			if (DEBUG) {				trace(msg);			}		}					}}