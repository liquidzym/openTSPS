package com.lab {		import flash.geom.Point;		/**	 * This is an abstract class (in an as3 sense) that describes a person as 	 * defined by openTSPS	 *	 * @author Jeff Hoefs.	 */	public class PersonBase {				private var _id:uint; 		private var _realAge:Number;		private var _age:uint; 	 	private var _centroid:Point;  		private var _velocity:Point;  		private var _opticalFlow:Point;		private var _realWidth:Number;		private var _realHeight:Number; 		private var _dead:Boolean;		private var _contours:Array;		private var _x:Number;		private var _y:Number;				/**		 * @return	person id		 */		public function get id():uint {			return _id;		}				/**		 * @param	value person id		 */		public function set id(value:uint):void {			_id = value;		}				/**		 * @return real age of person		 */		public function get realAge():Number {			return _realAge;		}				/**		 * @param	value real age of person		 */		public function set realAge(value:Number):void {			_realAge = value;		}				/**		 * @return	age of person		 */		public function get age():uint {			return _age;		}				/**		 * @param	value age of person		 */		public function set age(value:uint):void {			_age = value;		}				/**		 * @return	centroid		 */		public function get centroid():Point {			return _centroid;		}				/**		 * @param	value centroid		 */		public function set centroid(value:Point):void {			_centroid = value;		}				/**		 * @return	velocity of person		 */		public function get velocity():Point {			return _velocity;		}				/**		 * @param	value velocity of person		 */		public function set velocity(value:Point):void {			_velocity = value;		}				/**		 * @return	optical flow		 */		public function get opticalFlow():Point {			return _opticalFlow;		}				/**		 * @param	value optical flow		 */		public function set opticalFlow(value:Point):void {			_opticalFlow = value;		}				/**		 * @return	width of bounding rectangle		 */		public function get realWidth():Number {			return _realWidth;		}				/**		 * @param	value width of bounding rectangle		 */		public function set realWidth(value:Number):void {			_realWidth = value;		}				/**		 * @return	height of bounding rectangle		 */		public function get realHeight():Number {			return _realHeight;		}				/**		 * @param	height of bounding rectangle		 */		public function set realHeight(value:Number):void {			_realHeight = value;		}				/**		 * @return	has person been removed from the view		 */		public function get dead():Boolean {			return _dead;		}				/**		 * @param	has person been removed from the view		 */		public function set dead(value:Boolean):void {			_dead = value;		}				/**		 * @return	contours of person object		 */		public function get contours():Array {			return _contours;		}				/**		 * @param value contours of person object		 */		public function set contours(value:Array):void {			_contours = value;		}						/**		 * @return	x coordinate of bounding rectangle		 */		public function get x():Number {			return _x;		}				/**		 * @param	value x coordinate of bounding rectangle		 */		public function set x(value:Number):void {			_x = value;		}		/**		 * @return	y coordinate of bounding rectangle		 */		public function get y():Number {			return _y;		}				/**		 * @param	value y coordinate of bounding rectangle		 */		public function set y(value:Number):void {			_y = value;		}							public function PersonBase(id:uint = 0, age:uint = 1, centroid:Point = null, velocity:Point = null, x:Number = 0, y:Number = 0, width:Number = 0, height:Number = 0, opticalFlow:Point = null, dead:Boolean = false ) {						_id = id;			_age = _realAge = age;						if (centroid == null) {				_centroid = new Point(0, 0);			} else {				_centroid = centroid;			}						if (velocity == null) {				_velocity = new Point(0, 0);			} else {				_velocity = velocity;			}						if (opticalFlow == null) {				_opticalFlow = new Point(0, 0);			} else {				_opticalFlow = opticalFlow;			}						_x = x;			_y = y;			_realWidth = width;			_realHeight = height;			_dead = dead;			_contours = new Array();		}	}}