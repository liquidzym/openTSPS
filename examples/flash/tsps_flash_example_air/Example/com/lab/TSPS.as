package com.lab {	import com.lab.TSPSPerson;	import com.lab.connection.ITSPSConnection;	import com.lab.events.TSPSDataEvent;	import com.lab.events.TSPSEvent;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.utils.Dictionary;	import flash.utils.Timer;		/**	 * A Class for tracking person data sent from openTSPS	 *	 * @author The Lab at Rockwell Group. Modified by Jeff Hoefs.	 */	public class TSPS extends EventDispatcher {				public static const TCP_CONNECTION:String = "tcpConnection";		public static const OSC_CONNECTION:String = "oscConnection";				private static const UPDATE_RATE:uint = 1000; // time in ms		private static const DEBUG:Boolean = true;		private var people:Dictionary;		private var _connection:ITSPSConnection;				private var _updateTimer:Timer;				/**		 * @param	connection A connection that implements ITSPSConnection. 		 */		public function TSPS(connection:ITSPSConnection) {						// store people in Dictionary (Map). Use weak references.			people = new Dictionary(true);						_connection = connection;			_connection.addEventListener(TSPSDataEvent.DATA_READY, onDataReady);						_updateTimer = new Timer(UPDATE_RATE, 0);			_updateTimer.addEventListener(TimerEvent.TIMER, update);			_updateTimer.start();		}				// increase age and ensure proper garbage collection of people		private function update(e:Event):void {			for each (var key:TSPSPerson in people) {				if (key is TSPSPerson) {					people[key.id].update();				}			}		}				// assigning incoming data to person object, dispatch event		// according to message type (personEntered, personMoved, personWillLeave)		private function onDataReady(evt:TSPSDataEvent):void {						var messageObject:Object = evt.data;						var messageAddress:String = messageObject.address;			var person:TSPSPerson = new TSPSPerson();			if(messageObject.id) person.id = messageObject.id;			if(messageObject.age) person.age = messageObject.age;			if(messageObject.centroid) {				person.centroid.x = messageObject.centroid.x;				person.centroid.y = messageObject.centroid.y;						} 			if(messageObject.velocity) {				person.velocity.x = messageObject.velocity.x;				person.velocity.y = messageObject.velocity.y;			}			if(messageObject.boundingrect) {				person.x = messageObject.boundingrect.x;				person.y = messageObject.boundingrect.y;				person.realWidth = messageObject.boundingrect.width;				person.realHeight = messageObject.boundingrect.height;			}			if(messageObject.opticalFlow) {				person.opticalFlow.x = messageObject.opticalFlow.y;				person.opticalFlow.y = messageObject.opticalFlow.y;			}			//get contours			if(messageObject.contours) {				for (var i:int = 0; i<messageObject.contours.length; i++){					var pt:Point = new Point();					pt.x = messageObject.contours[i].x;					pt.y = messageObject.contours[i].y;					person.contours.push( pt );				}			}						if ( messageAddress == "TSPS/personEntered/") {				personEntered(person);			} else if ( messageAddress == "TSPS/personMoved/" ) {				personMoved(person);					} else if ( messageAddress == "TSPS/personWillLeave/" ) {				personLeft(person);			} else {				debug("Invalid message address");			}					}		// keep track of new people entering view		// dispatch event, listen for this event in your application		private function personEntered(person:TSPSPerson):void {						// add new person to Dictionary (Map)			if (people[person.id]) {				debug("person already exists");			} else {				people[person.id] = person;			}						person.addEventListener(TSPSEvent.PERSON_LEFT, personDied);			dispatchEvent( new TSPSEvent( TSPSEvent.PERSON_ENTERED, person ) );					}				// keep track of a person's movement within the view		// dispatch event, listen for this event in your application		private function personMoved( person:TSPSPerson ):void {						// check to be sure this person entered			if (people[person.id]) {				people[person.id].updateData(person);				dispatchEvent( new TSPSEvent( TSPSEvent.PERSON_MOVED, people[person.id] ) );			} else {				//haven't dispatched a personentered yet, so do that and return				//this occurs if people are already in veiw when the app is started				debug("unfound person moved");				personEntered ( person );			}					}						private function personDied( evt:TSPSEvent ):void {						evt.person.removeEventListener(TSPSEvent.PERSON_LEFT, personDied);			personLeft(evt.person);						}				// keep track of people leaving the view		// dispatch event, listen for this event in your application		private function personLeft( person:TSPSPerson ):void {						if (people[person.id]) {				people[person.id].dead = true;				people[person.id].updateData(person);				// remove person from Dictionary				delete people[person.id];			} else {				debug("unknown person left");			}			dispatchEvent( new TSPSEvent( TSPSEvent.PERSON_LEFT, person ) );					}				private function debug(msg:String):void {			if (DEBUG) {				trace(msg);			}		}	}}