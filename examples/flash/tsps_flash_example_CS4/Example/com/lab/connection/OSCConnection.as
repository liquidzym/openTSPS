package com.lab.connection  {		import flash.events.EventDispatcher;	import flash.events.Event;	import flash.events.IOErrorEvent;		import flash.utils.ByteArray;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.setTimeout;		import com.lab.connection.ITSPSConnection;		import com.lab.connection.OSCSocket;	import com.lab.events.TSPSDataEvent;		import org.tuio.osc.*;		/**	 * A Class to handle incoming OSC data sent from openTSPS.	 *	 * @author Jeff Hoefs. Some code snippets referenced from org.tuio.osc.TCPConnector.as	 * (http://code.google.com/p/tuio-as3/)	 */ 	// implement IOSCConnector and IOSCListener from tuio-as3 to comply with tuio-as3 OSC classes	public class OSCConnection extends EventDispatcher implements ITSPSConnection, 		IOSCConnector, 		IOSCListener {		private var socket:OSCSocket;		private var oscManager:OSCManager;				private var listeners:Array;				private var _autoRestart:Boolean;		public function OSCConnection(autoRestart:Boolean = true) {			_autoRestart = autoRestart;						createSocket();						listeners = new Array();						oscManager = new OSCManager(this);			oscManager.addMsgListener(this);		}				private function createSocket():void {						socket = new OSCSocket();			socket.addEventListener(Event.CLOSE, closeHandler);			socket.addEventListener(Event.CONNECT, connectHandler);			socket.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			socket.addEventListener(OSCEvent.OSC_DATA, receiveOscData);		}				/**		 * Establish a connection with openTSPS.		 *		 * @param	host the IP address of the host computer		 * @param	port the port		 */		public function connect(host:String = "127.0.0.1", port:int = 3333 ):void {				socket.connect(host, port);					}				/**		 * Connection status		 *		 * @return The status of the connection with openTSPS		 */		public function get connected():Boolean {			if (socket != null) return socket.connected;			else return false;		}				// pass events up to calling class		private function closeHandler(evt:Event):void {			dispatchEvent(evt);        }		     	private function connectHandler(evt:Event):void {	     		dispatchEvent(evt);        } 				private function ioErrorHandler(evt:IOErrorEvent):void {			trace("ioErrorHandler: " + evt);			if (_autoRestart) {				// To do: replace this with timer				if (this.connected == false) setTimeout(this.connect, 1500);			}		}				// implementation of receiveOscData copied from tuio-as3 TCPConnector.as		// http://code.google.com/p/tuio-as3/		private function receiveOscData(evt:OSCEvent):void {			var packet:ByteArray = new ByteArray();			packet.writeBytes(evt.data,4);			packet.position = 0;						if (packet != null) {				if (this.listeners.length > 0) {					//call receive listeners and push the received messages					for each(var l:IOSCConnectorListener in this.listeners) {						if (OSCBundle.isBundle(packet)) {							l.acceptOSCPacket(new OSCBundle(packet));						} else if (OSCMessage.isMessage(packet)) {							l.acceptOSCPacket(new OSCMessage(packet));						} else {							trace("received: invalid osc packet.");						}					}				}			}		}				/**		 * Callback function for receiving openTSPS tracking data in OSCMessages.		 * 		 * @param	msg The OSCMessage containing a single TSPS message.		 */ 		public function acceptOSCMessage(msg:OSCMessage):void {						// as of Dec 6, 2010 the format of the osc packet sent by openTSPS is:			// however format could change in the future						//address: TSPS/personEntered/, TSPS/personMoved/, TSPS/personWillLeave/			//argument 0: pid;			//argument 1: age;			//argument 2: centroid.x;			//argument 3: centroid.y;			//argument 4: velocity.x;			//argument 5: velocity.y;			//argument 6: boundingRect.x;			//argument 7: boundingRect.y;			//argument 8: boundingRect.width;			//argument 9: boundingRect.height;			//argument 10: opticalFlowVectorAccumulation.x;			//argument 11: opticalFlowVectorAccumulation.y;			//argument 12+ : contours (if enabled)						var messageObject:Object = new Object();			messageObject.address = msg.address;			messageObject.id = msg.arguments[0];			messageObject.age = msg.arguments[1];						messageObject.centroid = new Point(msg.arguments[2], msg.arguments[3]);								messageObject.velocity = new Point(msg.arguments[4], msg.arguments[5]);			var rect:Rectangle = new Rectangle(msg.arguments[6], msg.arguments[7], msg.arguments[8], msg.arguments[9]);			messageObject.boundingrect = rect;			messageObject.opticalFlow = new Point(msg.arguments[10], msg.arguments[11]);			var contourArray:Array = new Array();			//get contours			if (msg.arguments.length > 12) {				for (var i:int = 12; i<msg.arguments.length; i+=2){					var pt:Point = new Point(msg.arguments[i], msg.arguments[i+1]);					contourArray.push( pt );				}				messageObject.contours = contourArray;			}						dispatchEvent( new TSPSDataEvent( TSPSDataEvent.DATA_READY, messageObject ) );		}				/**		 * Adds a listener to the callback stack . The callback functions of the listener will be called on incoming TUIOEvents.		 * implementation copied from tuio-as3 TCPConnector.as		 * http://code.google.com/p/tuio-as3/		 *		 * @param	listener Object of a class that implements the callback functions defined in the IOSCConnectorListener interface.		 */		public function addListener(listener:IOSCConnectorListener):void {						if (this.listeners.indexOf(listener) > -1) return;						this.listeners.push(listener);					}				/**		 * Removes the given listener from the callback stack.		 * implementation copied from tuio-as3 TCPConnector.as		 * http://code.google.com/p/tuio-as3/		 * 		 * @param	listener		 */				public function removeListener(listener:IOSCConnectorListener):void {						var tmp:Array = this.listeners.concat();			var newList:Array = new Array();						var item:Object = tmp.pop();			while (item != null) {				if (item != listener) newList.push(item);			}						this.listeners = newList;					}				public function sendOSCPacket(oscPacket:OSCPacket):void {			// Not Implemented			// added to comply with IOSCConnector interface		}			}	}